"""
:copyright: (c) 2014 Building Energy Inc
:license: BSD 3-Clause, see LICENSE for more details.
"""
"""
Search methods pertaining to buildings.

"""
# python
import operator

# django
from django.db.models import Q

# app
from .models import BuildingSnapshot


def convert_to_js_timestamp(timestamp):
    """converts a django/python datetime object to milliseconds since epoch
        duplicated code with seed utils due to circular imports
    """
    return int(timestamp.strftime("%s")) * 1000


def get_building_fieldnames():
    """returs a list of field names for the BuildingSnapshot class/model that
    will be searched against
    """
    return [
        'pm_property_id',
        'tax_lot_id',
        'address_line_1',
        'property_name',
    ]


def search_buildings(q, fieldnames=None, queryset=None):
    """returns a queryset for matching buildings

    :param str or unicode q: search string
    :param list fieldnames: list of BuildingSnapshot model fieldnames
        (defaults to those generated by get_building_field_names())
    :param queryset: optional queryset to filter from, defaults to
        BuildingSnapshot.objects.all()
    :returns: :queryset: queryset of matching buildings
    """
    if fieldnames is None:
        fieldnames = get_building_fieldnames()
    if queryset is None:
        queryset = BuildingSnapshot.objects.all()
    if q == '':
        return queryset
    qgroup = reduce(operator.or_, (
        Q(**{fieldname + '__icontains': q}) for fieldname in fieldnames
    ))
    return queryset.filter(qgroup)


def generate_paginated_results(queryset, number_per_page=25, page=1,
                               whitelist_orgs=None, below_threshold=False):
    """returns a page of results as a list from the queryset for the given
       fields

    Usage:
        generate_paginated_results(q, 1)
    Out:
    [{
        'gross_floor_area': 1710,
        'site_eui': 123,
        'tax_lot_id': u'IMP9-test001',
        'year_built': 2001
    }]

    :param queryset: optional queryset to filter from
    :param int number_per_page: optional number of results per page
    :param int page: optional page of results to get
    :param whitelist_orgs: a queryset returning the organizations in which all
        building fields can be returned, otherwise only the parent
        organization's ``exportable_fields`` should be returned. The
        ``whitelist_orgs`` are the orgs the request user belongs.
    :param below_threshold: True if less than the parent org's query threshold
        is greater than the number of queryset results. If True, only return
        buildings within whitelist_orgs.
    """
    parent_org = None
    if whitelist_orgs:
        parent_org = whitelist_orgs.first().parent_org
    page = page - 1 if page > 0 else 0  # zero index

    start = page * number_per_page
    end = start + number_per_page
    if start > queryset.count():
        return []
    if end > queryset.count():
        end = queryset.count()

    building_list = []
    buildings_from_query = queryset[start:end]

    if parent_org:
        exportable_fields = parent_org.exportable_fields
        exportable_field_names = exportable_fields.values_list(
            'name', flat=True
        )
    else:
        exportable_field_names = None

    for b in buildings_from_query:
        # check and process buildings from other orgs
        if is_not_whitelist_building(parent_org, b, whitelist_orgs):
            building_dict = b.to_dict(exportable_field_names)
        else:
            building_dict = b.to_dict()
        # see if a building is matched
        co_parent = b.co_parent
        if co_parent:
            building_dict['matched'] = True
            building_dict['coparent'] = co_parent.to_dict()
        else:
            building_dict['matched'] = False

        # only add the buildings if it is in an org the user belongs or the
        # query count exceeds the query threshold
        if not below_threshold or not is_not_whitelist_building(
            parent_org, b, whitelist_orgs
        ):
            building_list.append(building_dict)

    return building_list


def is_not_whitelist_building(parent_org, building, whitelist_orgs):
    """returns false if a building is part of the whitelist_orgs

    :param parent_org: the umbrella parent Organization inst.
    :param building: the BuildingSnapshot inst.
    :param whitelist_orgs: queryset of Organization insts.
    :returns: bool
    """
    return (parent_org and building.super_organization not in whitelist_orgs)


def filter_other_params(queryset, other_params):
    """applyes a dictionary filter to the query set. Does some domain specific
    parsing,
       mostly to remove extra query params and deal with ranges.
       Ranges should be passed in as '<field name>__lte' or '<field name>__gte'
           e.g. other_params = {'gross_floor_area__lte': 50000}

       This is what the filter_list would look like for a low confidence query:
        other_params['filter_list'] = [
            {
                "canonical_building__canonical_snapshot__confidence__lt":0.4,
                "canonical_building__isnull":false
            },
            {
                "best_guess_confidence__isnull":true,
                "canonical_building__isnull":true
            },
            {
                "best_guess_confidence__lt":0.4,
                "canonical_building__isnull":true
            }
        ]

    :param Django Queryset queryset: queryset to be filtered
    :param dict other_params: dictionary to be parsed and applied to filter.
    :returns: Django Queryset:
    """
    query_dict = {}
    filter_list = None
    if 'filter_list' in other_params:
        filter_list = other_params['filter_list']
        del(other_params['filter_list'])

    for k, v in other_params.iteritems():
        if k != 'q' and v != '':
            if ('__lt' in k or '__gt' in k or '__isnull' in k or
               k == 'import_file_id' or k == 'source_type'):
                query_dict["%s" % k] = v
            else:
                query_dict["%s__icontains" % k] = v

    if filter_list:
        # get a filtered set of buildings and join all the matches within
        # `|=` is a Django bitwise operator OR that is translated into an OR
        # in the WHERE clause of the SQL statement
        # e.g. queryset = [1,2,3,4,5,6,7]
        queryset = queryset.filter(**query_dict)
        # e.g. queryset = [1,2,3,4,5]
        start = queryset.filter(**filter_list[0])
        # e.g. start = [1,2,3,4]
        for f in filter_list:
            start |= queryset.filter(**f)
            # e.g. start = [1,2,3,4] | [5]
        return start
        # e.g. returns [1,2,3,4,5]
    else:
        return queryset.filter(**query_dict)
